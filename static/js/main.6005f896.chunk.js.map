{"version":3,"sources":["serviceWorker.js","firebase.js","components/scanner.js","components/ui/icons.js","components/ui/buttons.js","components/sounds/index.js","components/scan-error.js","components/scan-result.js","components/settings-panel.js","components/app.js","domain/validation-result.js","domain/ticket-data.js","domain/validator.js","domain/hashes-storage.js","domain/mode-storage.js","domain/check-hash.js","index.js","domain/check-firebase.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Scanner","onError","onScan","delay","facingMode","style","width","Positive","enableBackground","viewBox","cx","cy","r","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeWidth","d","Negative","Button","props","className","children","playSound","tone","length","Tone","Synth","toMaster","triggerAttackRelease","playSuccessSound","playErrorSound","ScanError","this","onReset","onClick","React","Component","CheckResult","name","result","undefined","isValid","Array","isArray","text","map","row","key","BandType","type","availableTypes","STAFF","SPEAKER","REGULAR","typeToShow","hasOwnProperty","color","background","ScanResult","handleUpdate","setState","checks","entries","on","off","ticketData","results","ConnectionStatus","useState","onLine","isOnline","setIsOnline","useEffect","handleOffline","handleOnline","addEventListener","removeEventListener","StorageStatus","hashStorage","hashesCount","setHashesCount","hashes","getValue","data","SyncStatus","updatedAt","setUpdatedAt","update","lastSyncText","Date","now","toFixed","ModeStatus","modeStorage","mode","setMode","confirm","toggle","SettingsPanel","App","handleScan","a","continueScanning","validator","check","handleError","renderContent","ValidationResult","Map","set","emit","EventEmitter","TicketData","uid","JSON","parse","Validator","qrCodeText","fromText","validationResult","forEach","registerCheck","func","setCheckResult","DEFAULT_EXPIRATION_TIME","Hashes","expirationTime","HashesStorage","storage","storageKey","updater","toStore","setItem","stringify","retrievedValue","storedHashes","getItem","e","isOutdated","hashesList","save","ModeStorage","available","getAvailableModes","current","next","indexOf","digestMessage","message","msgUint8","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","from","Uint8Array","b","toString","padStart","join","localStorage","getHashes","functions","httpsCallable","validHashes","digestHex","includes","getOfflineValidator","validateTicket","getOnlineValidator","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6005f896.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as firebase from \"firebase/app\";\nimport \"firebase/functions\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDwGFsr2F-ju_u162LengdX2BeGZ_Bh4Xw\",\n    authDomain: \"atm-voting.firebaseapp.com\",\n    databaseURL: \"https://atm-voting.firebaseio.com\",\n    projectId: \"atm-voting\",\n    storageBucket: \"atm-voting.appspot.com\",\n    messagingSenderId: \"639364440999\",\n    appId: \"1:639364440999:web:2185c88196af2cc6\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport QrReader from 'react-qr-reader';\n\nexport default function Scanner({ onError, onScan }) {\n    return <QrReader\n        delay={300}\n        facingMode=\"environment\"\n        onError={onError}\n        onScan={onScan}\n        style={{ width: '100%' }}\n    />;\n}\n","import React from 'react';\n\nexport function Positive() {\n    return <svg enableBackground=\"new 0 0 50 50\" viewBox=\"0 0 50 50\">\n        <circle cx=\"25\" cy=\"25\" r=\"25\" fill=\"#25AE88\" />\n        <path fill=\"none\" stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M38 15L22 33 12 25\" />\n    </svg>\n}\n\nexport function Negative() {\n    return <svg enableBackground=\"new 0 0 50 50\" viewBox=\"0 0 50 50\">\n        <circle cx=\"25\" cy=\"25\" r=\"25\" fill=\"#D75A4A\" />\n        <path fill=\"none\" stroke=\"#FFF\" strokeLinecap=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M16 34L25 25 34 16\" />\n        <path fill=\"none\" stroke=\"#FFF\" strokeLinecap=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M16 16L25 25 34 34\" />\n    </svg>;\n}","import React from 'react';\n\nimport \"./buttons.css\";\n\nexport function Button(props) {\n    return <button className=\"button\" {...props}>{props.children}</button>;\n}","import Tone from \"tone\";\n\nfunction playSound(tone, length) {\n    const synth = new Tone.Synth().toMaster();\n    synth.triggerAttackRelease(tone, length);\n}\n\nexport function playSuccessSound() {\n    playSound('C6', '32n');\n}\n\nexport function playErrorSound() {\n    playSound('G3', '4n');\n}\n","import React from \"react\";\n\nimport { Negative } from \"./ui/icons\";\nimport { Button } from \"./ui/buttons\";\nimport { playErrorSound } from \"./sounds\";\n\nimport \"./scan-error.css\";\n\nexport default class ScanError extends React.Component {\n    componentDidMount() {\n        playErrorSound();\n    }\n\n    render() {\n        const { error, onReset } = this.props;\n\n        return <div className=\"scan-error-container\">\n            <Negative />\n            <div className=\"scan-error-msg\">{error}</div>\n            <Button onClick={onReset}>scan again</Button>\n        </div>;\n    }\n}\n","import React from \"react\";\n\nimport { Positive, Negative } from \"./ui/icons\";\nimport { Button } from \"./ui/buttons\";\nimport { playErrorSound, playSuccessSound } from \"./sounds\";\n\nimport './scan-result.css';\nimport ScanError from \"./scan-error\";\n\nfunction CheckResult({ name, result }) {\n    if (result === undefined) {\n        return <div>{name} pending...</div>;\n    }\n\n    if (result === null) {\n        return <div>{name} not executed</div>;\n    }\n\n    return <div className=\"result-row\">\n        <div className=\"result-icon\">{result.isValid ? <Positive /> : <Negative />}</div>\n        <div>\n            {\n                Array.isArray(result.text)\n                    ? result.text.map(row => <div key={row}>{row}</div>)\n                    : result.text\n            }\n        </div>\n    </div>;\n}\n\nfunction BandType({ type }) {\n    const availableTypes = {\n        STAFF: '#5f2799',\n        SPEAKER: '#5f2799',\n        REGULAR: '#a7168f'\n    };\n    const typeToShow = availableTypes.hasOwnProperty(type) ? type : 'REGULAR';\n    const color = availableTypes[typeToShow];\n\n    return <div className=\"ticket-type\" style={{ background: color }}>{typeToShow}</div>;\n}\n\nexport default class ScanResult extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checks: [...this.props.result.checks.entries()]\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.result) {\n            playSuccessSound();\n        } else {\n            playErrorSound();\n        }\n        this.props.result.on('update', this.handleUpdate);\n    }\n\n    componentWillUnmount() {\n        this.props.result.off('update', this.handleUpdate);\n    }\n\n    handleUpdate = () => {\n        this.setState({ checks: [...this.props.result.checks.entries()] });\n        playSuccessSound();\n    };\n\n    render() {\n        const { ticketData, error } = this.props.result;\n\n        if (error) {\n            return <ScanError error={error} onReset={this.props.onReset} />;\n        }\n\n        const results = this.state.checks.map(([name, result]) =>\n            <CheckResult key={name} name={name} result={result} />);\n\n        return (\n            <div className=\"scan-result-container\">\n                <div className=\"ticket-data\">\n                    <div className=\"ticket-data-name\">{ticketData.name}</div>\n                    <BandType type={ticketData.type} />\n                </div>\n                {results}\n                <Button onClick={this.props.onReset}>scan again</Button>\n            </div>\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react';\n\nimport './settings-panel.css';\n\nfunction ConnectionStatus(props) {\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n    useEffect(() => {\n        const handleOffline = () => setIsOnline(false);\n        const handleOnline = () => setIsOnline(true);\n\n        window.addEventListener('offline', handleOffline);\n        window.addEventListener('online', handleOnline);\n\n        return () => {\n            window.removeEventListener('offline', handleOffline);\n            window.removeEventListener('online', handleOnline);\n        };\n    }, []);\n\n    return (\n        <div className={`${props.className} is-online is-online-${isOnline ? 'true' : 'false'}`}>\n            <label>network</label>\n            {isOnline ? 'ONLINE' : 'OFFLINE'}\n        </div>\n    );\n}\n\nfunction StorageStatus(props) {\n    const { hashStorage } = props;\n    const [hashesCount, setHashesCount] = useState(0);\n\n    useEffect(() => {\n        const { hashes } = hashStorage.getValue();\n        setHashesCount(hashes.length);\n\n        const handleUpdate = data => setHashesCount(data.hashes.length);\n\n        hashStorage.on('update', handleUpdate);\n        return () => hashStorage.off('update', handleUpdate);\n    }, [hashStorage]);\n\n    return (\n        <div className={`${props.className} memory`}>\n            <label>tickets</label>\n            {hashesCount}\n        </div>\n    );\n}\n\nfunction SyncStatus(props) {\n    const { hashStorage } = props;\n    const [updatedAt, setUpdatedAt] = useState(0);\n\n    useEffect(() => {\n        const { updatedAt } = hashStorage.getValue();\n        setUpdatedAt(updatedAt);\n        hashStorage.update();\n\n        const handleUpdate = data => setUpdatedAt(data.updatedAt);\n\n        hashStorage.on('update', handleUpdate);\n        return () => hashStorage.off('update', handleUpdate);\n    }, [hashStorage]);\n\n    const lastSyncText = updatedAt\n        ? `${((Date.now() - updatedAt) / 1000 / 60).toFixed(0)}min`\n        : 'never';\n\n    return (\n        <div className={`${props.className} sync`}>\n            <label>sync</label>\n            {lastSyncText}\n        </div>\n    );\n}\n\nfunction ModeStatus(props) {\n    const { modeStorage } = props;\n    const [mode, setMode] = useState(0);\n\n    useEffect(() => {\n        const mode = modeStorage.getValue();\n        const handleUpdate = mode => setMode(mode);\n\n        setMode(mode);\n        modeStorage.on('update', handleUpdate);\n        return () => modeStorage.off('update', handleUpdate);\n    }, [modeStorage]);\n\n    return (\n        <div className={`${props.className} sync`} onClick={() => window.confirm('Change mode?') && modeStorage.toggle()}>\n            <label>mode</label>\n            {mode}\n        </div>\n    );\n}\n\nexport default function SettingsPanel(props) {\n    return (\n        <div className=\"settings-panel\">\n            <ConnectionStatus className=\"settings-panel-item\" />\n            <StorageStatus className=\"settings-panel-item\" hashStorage={props.hashStorage} />\n            <SyncStatus className=\"settings-panel-item\" hashStorage={props.hashStorage} />\n            <ModeStatus className=\"settings-panel-item\" modeStorage={props.modeStorage} />\n        </div>\n    );\n};","import React, { Fragment } from 'react';\nimport './app.css';\n\nimport Scanner from './scanner';\nimport ScanResult from './scan-result';\nimport ScanError from './scan-error';\nimport Settings from './settings-panel';\n\nexport default class App extends React.Component {\n    state = {\n        error: null,\n        result: null\n    };\n\n    handleScan = async (data) => {\n        // no QR code is found\n        if (!data) return this.continueScanning();\n\n        try {\n            // QR code found, validate its data against external service\n            const result = this.props.validator.check(data);\n            this.setState({ result });\n        } catch (error) {\n            this.setState({ error: `invalidTicketFormat: ${data}`});\n        }\n    };\n\n    handleError = error => {\n        this.setState({ error: `scannerError: ${error}` });\n    };\n\n    continueScanning = () => {\n        this.setState({ result: null, error: null });\n    };\n\n    renderContent() {\n        const { state, props } = this;\n        const { result, error } = state;\n\n        if (result) {\n            return <ScanResult result={result} onReset={this.continueScanning} />;\n        }\n\n        if (error) {\n            return <ScanError error={error} onReset={this.continueScanning} />\n        }\n\n        return <Fragment>\n            <Scanner onError={this.handleError} onScan={this.handleScan} />\n            <Settings {...props} />\n        </Fragment>;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    atm12 scnr\n                </header>\n                <main className=\"App-main\">{this.renderContent()}</main>\n            </div>\n        );\n    }\n}\n","import { EventEmitter } from 'events';\n\nexport default class ValidationResult extends EventEmitter {\n    /**\n     * @param {TicketData} ticketData\n     */\n    constructor({ ticketData }) {\n        super();\n        this.ticketData = ticketData;\n        this.checks = new Map();\n    }\n\n    registerCheck(name) {\n        this.checks.set(name, undefined);\n    }\n\n    setCheckResult(name, result) {\n        this.checks.set(name, result);\n        this.emit('update');\n    }\n}","export default class TicketData {\n    constructor({ uid, name, type, error }) {\n        this.uid = uid;\n        this.name = name;\n        this.type = type;\n        this.error = error;\n    }\n\n    /**\n     * @param {String} text\n     * @return {TicketData}\n     */\n    static fromText(text) {\n        const parsed = JSON.parse(text);\n        return new TicketData(parsed);\n    }\n}\n","import ValidationResult from './validation-result';\nimport TicketData from './ticket-data';\n\nexport default class Validator {\n    constructor(checks = []) {\n        this.checks = checks;\n    }\n\n    /**\n     *\n     * @param {String} qrCodeText\n     * @return {ValidationResult}\n     */\n    check(qrCodeText) {\n        const ticketData = TicketData.fromText(qrCodeText);\n        const validationResult = new ValidationResult({ ticketData });\n\n        this.checks.forEach(async (check) => {\n            validationResult.registerCheck(check.name);\n            validationResult.setCheckResult(check.name, await check.func(validationResult.ticketData));\n        });\n\n        return validationResult;\n    }\n}\n","import { EventEmitter } from 'events';\n\nconst DEFAULT_EXPIRATION_TIME = 10 * 60 * 1000; // 10 minutes\n\nclass Hashes {\n    constructor({ updatedAt = 0, hashes = [], expirationTime = DEFAULT_EXPIRATION_TIME } = {}) {\n        this.updatedAt = updatedAt;\n        this.hashes = hashes;\n        this.expirationTime = expirationTime;\n    }\n\n    isOutdated() {\n        const { updatedAt, expirationTime } = this;\n        return Date.now() - updatedAt > expirationTime;\n    }\n}\n\nexport default class HashesStorage extends EventEmitter {\n    constructor({ storage, storageKey, updater }) {\n        super();\n        this.storage = storage;\n        this.storageKey =  storageKey;\n        this.updater = updater;\n    }\n\n    save(hashes = []) {\n        const toStore = new Hashes({ updatedAt: Date.now(), hashes });\n        this.storage.setItem(this.storageKey, JSON.stringify(toStore));\n        this.emit('update', toStore);\n    }\n\n    /**\n     * @return {Hashes}\n     */\n    getValue() {\n        let retrievedValue = {};\n\n        try {\n            const storedHashes = this.storage.getItem(this.storageKey);\n\n            if (storedHashes) {\n                retrievedValue = JSON.parse(storedHashes);\n            }\n        } catch (e) {}\n\n        return new Hashes(retrievedValue);\n    }\n\n    async update() {\n        try {\n            if (this.getValue().isOutdated()) {\n                const hashesList = await this.updater();\n                this.save(hashesList);\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { EventEmitter } from 'events';\n\nconst DEFAULT_MODE = 'VALIDATE';\n\nexport default class ModeStorage extends EventEmitter {\n    constructor({ storage, storageKey }) {\n        super();\n        this.storage = storage;\n        this.storageKey =  storageKey;\n    }\n\n    getAvailableModes() {\n        return ['VALIDATE', 'PARTY', 'TEST'];\n    }\n\n    toggle() {\n        const available = this.getAvailableModes();\n        const current = this.getValue();\n        const next = available[available.indexOf(current) + 1 % available.length];\n\n        this.save(next);\n    }\n\n    save(mode = DEFAULT_MODE) {\n        this.storage.setItem(this.storageKey, mode);\n        this.emit('update', mode);\n    }\n\n    getValue() {\n        try {\n            const storedMode = this.storage.getItem(this.storageKey);\n            return storedMode || DEFAULT_MODE;\n        } catch (e) {}\n\n        return DEFAULT_MODE;\n    }\n}","async function digestMessage(message) {\n    const msgUint8 = new TextEncoder().encode(message);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nexport default function({ hashStorage }) {\n    hashStorage.update();\n\n    return {\n        name: 'offline check',\n        func: async (ticketData) => {\n            const { uid } = ticketData;\n            const { hashes: validHashes } = hashStorage.getValue();\n            const digestHex = await digestMessage(uid);\n            const isValid = validHashes.includes(digestHex);\n\n            return { isValid, text: `offline check ${isValid ? 'OK' : 'failed'}` };\n        }\n    };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport firebase from './firebase';\n\nimport App from './components/app';\nimport Validator from \"./domain/validator\";\nimport HashesStorage from \"./domain/hashes-storage\";\nimport ModeStorage from \"./domain/mode-storage\";\n\nimport getOnlineValidator from './domain/check-firebase';\nimport getOfflineValidator from './domain/check-hash';\n\nconst hashStorage = new HashesStorage({\n    storage: window.localStorage,\n    storageKey: 'atm-scnr-hashes',\n    updater: async () => {\n        const getHashes = firebase.functions().httpsCallable('getHashes');\n        const result = await getHashes();\n        return result.data.hashes;\n    }\n});\n\nconst modeStorage = new ModeStorage({\n    storage: window.localStorage,\n    storageKey: 'atm-scnr-mode'\n});\n\nconst validator = new Validator([\n    getOfflineValidator({ hashStorage }),\n    getOnlineValidator({ firebase, modeStorage }),\n]);\n\nReactDOM.render(<App validator={validator} hashStorage={hashStorage} modeStorage={modeStorage} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export default function ({ firebase, modeStorage }) {\n    const validateTicket = firebase.functions().httpsCallable('validateTicket');\n\n    return {\n        name: 'online check',\n        func: async (ticketData) => {\n            try {\n                const mode = modeStorage.getValue();\n                const { data } = await validateTicket({ mode, ticketData });\n                const { isValid, text } = data;\n                return { isValid, text };\n            } catch (err) {\n                console.log(err);\n                return null;\n            }\n        }\n    };\n};"],"sourceRoot":""}